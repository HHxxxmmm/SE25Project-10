{
  "info": {
    "name": "Mini12306 票务核心系统测试集",
    "description": "包含购票、退票、改签、支付等票务核心功能的测试用例，支持乘客关系验证和改签配对机制",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "orderNumber",
      "value": "",
      "type": "string"
    },
    {
      "key": "newOrderNumber",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. 购票操作",
      "item": [
        {
          "name": "购票 - 成人票",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'SUCCESS') {",
                  "        pm.collectionVariables.set('orderNumber', response.orderNumber);",
                  "        console.log('订单号已保存:', response.orderNumber);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"trainId\": 1,\n  \"departureStopId\": 1,\n  \"arrivalStopId\": 2,\n  \"travelDate\": \"2025-07-01\",\n  \"carriageTypeId\": 3,\n  \"passengers\": [\n    {\n      \"passengerId\": 319,\n      \"ticketType\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ticket/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ticket", "book"]
            }
          },
          "description": "购票功能说明：\n1. 系统会验证乘客ID与用户的关联关系\n2. 只有关联的乘客才能购票\n3. 支持多种票种：1-成人, 2-儿童, 3-学生, 4-残疾, 5-军人\n4. 购票成功后返回订单号，需要及时支付\n5. 使用二等座(carriageTypeId=3)确保库存充足"
        },
        {
          "name": "购票 - 多人票",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"trainId\": 2,\n  \"departureStopId\": 1,\n  \"arrivalStopId\": 2,\n  \"travelDate\": \"2025-07-02\",\n  \"carriageTypeId\": 3,\n  \"passengers\": [\n    {\n      \"passengerId\": 327,\n      \"ticketType\": 1\n    },\n    {\n      \"passengerId\": 4285,\n      \"ticketType\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ticket/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ticket", "book"]
            }
          },
          "description": "多人票购票：\n1. 支持一个订单购买多张票\n2. 每张票可以有不同的票种\n3. 所有乘客ID必须与用户有关联关系\n4. 使用不同日期避免时间冲突\n5. 使用车次2和二等座分散库存压力"
        },
        {
          "name": "购票 - 不同区间",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"trainId\": 3,\n  \"departureStopId\": 1,\n  \"arrivalStopId\": 3,\n  \"travelDate\": \"2025-07-03\",\n  \"carriageTypeId\": 3,\n  \"passengers\": [\n    {\n      \"passengerId\": 319,\n      \"ticketType\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ticket/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ticket", "book"]
            }
          },
          "description": "不同区间购票：\n1. 支持不同的出发站和到达站组合\n2. 系统会自动处理区间占用逻辑\n3. 使用不同日期避免时间冲突\n4. 使用车次3和二等座分散库存压力"
        },
        {
          "name": "购票 - 不同座位类型",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"trainId\": 4,\n  \"departureStopId\": 1,\n  \"arrivalStopId\": 2,\n  \"travelDate\": \"2025-07-04\",\n  \"carriageTypeId\": 3,\n  \"passengers\": [\n    {\n      \"passengerId\": 327,\n      \"ticketType\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/ticket/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ticket", "book"]
            }
          },
          "description": "不同座位类型：\n1. 支持不同的车厢类型\n2. 1-商务座, 2-一等座, 3-二等座等\n3. 使用不同日期避免时间冲突\n4. 使用车次4和二等座分散库存压力"
        }
      ]
    },
    {
      "name": "2. 支付操作",
      "item": [
        {
          "name": "支付订单",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'SUCCESS') {",
                  "        console.log('支付成功，订单号:', response.orderNumber);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/payment/pay?orderNumber={{orderNumber}}&userId={{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payment", "pay"],
              "query": [
                {
                  "key": "orderNumber",
                  "value": "{{orderNumber}}"
                },
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "description": "支付功能说明：\n1. 支付后车票状态从PENDING变为UNUSED\n2. 如果是改签订单，会处理原票状态更新\n3. 原票状态更新为CHANGED，库存回滚，座位释放"
        }
      ]
    },
    {
      "name": "3. 退票操作",
      "item": [
        {
          "name": "退票",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"orderNumber\": \"{{orderNumber}}\",\n  \"ticketIds\": [1],\n  \"refundReason\": \"行程变更\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/ticket/refund",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ticket", "refund"]
            }
          },
          "description": "退票功能说明：\n1. 只能退已支付的车票（状态为UNUSED）\n2. 退票后车票状态变为REFUNDED\n3. 库存会自动回滚\n4. 座位会被释放\n5. 订单总价会相应调整\n6. 如果订单没有有效车票，订单状态变为已取消\n\n注意：ticketIds需要替换为实际的车票ID。请先使用'获取订单车票信息'接口查看订单下的车票ID，然后将[1]替换为实际的车票ID。"
        }
      ]
    },
    {
      "name": "4. 改签操作",
      "item": [
        {
          "name": "改签",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'SUCCESS') {",
                  "        pm.collectionVariables.set('newOrderNumber', response.orderNumber);",
                  "        console.log('改签新订单号已保存:', response.orderNumber);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"originalOrderNumber\": \"{{orderNumber}}\",\n  \"ticketIds\": [1],\n  \"newTrainId\": 23,\n  \"newDepartureStopId\": 111,\n  \"newArrivalStopId\": 112,\n  \"newTravelDate\": \"2025-07-02\",\n  \"newCarriageTypeId\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/ticket/change",
              "host": ["{{baseUrl}}"],
              "path": ["api", "ticket", "change"]
            }
          },
          "description": "改签功能说明：\n1. 改签会创建新订单，原订单中的改签车票暂时保持不变\n2. 不允许修改乘车人\n3. 新出发站和到达站必须在同一城市\n4. 改签时会在Redis中记录配对关系：新票ID -> 原票ID:乘客ID\n5. 支付新订单后，原票状态更新为CHANGED，库存回滚，座位释放\n6. 原订单总价会减去改签车票的金额\n7. 如果原订单没有有效车票，订单状态变为已取消\n\n注意：ticketIds需要替换为实际的车票ID。请先使用'获取订单车票信息'接口查看订单下的车票ID，然后将[1]替换为实际的车票ID。"
        },
        {
          "name": "支付改签订单",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.status === 'SUCCESS') {",
                  "        console.log('改签订单支付成功，原票状态已更新');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/payment/pay?orderNumber={{newOrderNumber}}&userId={{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payment", "pay"],
              "query": [
                {
                  "key": "orderNumber",
                  "value": "{{newOrderNumber}}"
                },
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "description": "支付改签订单：\n1. 支付后新票状态变为UNUSED\n2. 系统会根据Redis配对关系找到对应的原票\n3. 原票状态更新为CHANGED\n4. 原票库存回滚，座位释放\n5. 原订单总价调整\n6. Redis配对关系被清理"
        }
      ]
    },
    {
      "name": "5. 测试接口",
      "item": [
        {
          "name": "测试购票",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/book",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "book"]
            }
          }
        },
        {
          "name": "测试查询库存",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/stock",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "stock"]
            }
          }
        },
        {
          "name": "测试支付",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/pay?orderNumber={{orderNumber}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "pay"],
              "query": [
                {
                  "key": "orderNumber",
                  "value": "{{orderNumber}}"
                }
              ]
            }
          }
        },
        {
          "name": "测试完整流程：购票+等待+支付",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/book-and-pay",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "book-and-pay"]
            }
          }
        },
        {
          "name": "检查订单是否存在",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/check-order?orderNumber={{orderNumber}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "check-order"],
              "query": [
                {
                  "key": "orderNumber",
                  "value": "{{orderNumber}}"
                }
              ]
            }
          }
        },
        {
          "name": "获取订单车票信息",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/order-tickets?orderNumber={{orderNumber}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "order-tickets"],
              "query": [
                {
                  "key": "orderNumber",
                  "value": "{{orderNumber}}"
                }
              ]
            }
          },
          "description": "获取订单车票信息：\n1. 查看订单下的所有车票\n2. 获取车票ID用于退票和改签操作\n3. 查看车票状态、座位信息等"
        },
        {
          "name": "测试座位数据",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/seats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "seats"]
            }
          }
        },
        {
          "name": "测试改签完整流程",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/change-and-pay",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "change-and-pay"]
            }
          },
          "description": "测试改签完整流程：\n1. 创建测试订单\n2. 支付订单\n3. 进行改签\n4. 支付改签订单\n5. 验证原票状态更新"
        },
        {
          "name": "测试时间冲突检测",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/test-time-conflict",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "test-time-conflict"]
            }
          },
          "description": "测试时间冲突检测：\n1. 先购票并支付一张票\n2. 尝试购买同一乘客、同一时间段的车票\n3. 验证系统正确检测到时间冲突并拒绝购票"
        },
        {
          "name": "测试不同时间段购票",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/test-different-time",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "test-different-time"]
            }
          },
          "description": "测试不同时间段购票：\n1. 先购票并支付一张票（7月1日）\n2. 尝试购买同一乘客、不同时间段的车票（7月2日）\n3. 验证系统允许不同时间段的票"
        },
        {
          "name": "测试跨天时间冲突检测",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/test-cross-day-conflict",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "test-cross-day-conflict"]
            }
          },
          "description": "测试跨天时间冲突检测：\n1. 先购票并支付一张跨天票（7月1日23:00-7月2日02:00）\n2. 尝试购买时间冲突的票（7月2日01:00-04:00）\n3. 验证系统正确检测到跨天时间冲突"
        },
        {
          "name": "测试待支付状态时间冲突检测",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/test-pending-conflict",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "test-pending-conflict"]
            }
          },
          "description": "测试待支付状态时间冲突检测：\n1. 先购票（不支付，保持待支付状态）\n2. 尝试购买相同时间段的车票\n3. 验证系统正确检测到待支付状态的时间冲突"
        }
      ]
    },
    {
      "name": "6. 高并发测试",
      "item": [
        {
          "name": "高并发测试端点",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/test/concurrent-test?count=1000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "test", "concurrent-test"],
              "query": [
                {
                  "key": "count",
                  "value": "1000"
                }
              ]
            }
          },
          "description": "高并发测试说明：\n1. 时间冲突检测已暂时屏蔽，使用同一个乘客ID进行测试\n2. 并发执行1000个购票请求\n3. 使用多个车次（1-20循环）分散库存压力\n4. 使用二等座（carriageTypeId=3）确保库存充足\n5. 测试库存扣减的原子性和分布式锁的有效性\n6. 返回详细的测试结果统计"
        }
      ]
    },
    {
      "name": "订单管理",
      "item": [
        {
          "name": "取消待支付订单",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": {{userId}},\n  \"orderNumber\": \"{{orderNumber}}\",\n  \"cancelReason\": \"用户主动取消\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/order/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["api", "order", "cancel"]
            }
          },
          "response": []
        },
        {
          "name": "支付订单",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/payment/pay?orderNumber={{orderNumber}}&userId={{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payment", "pay"],
              "query": [
                {
                  "key": "orderNumber",
                  "value": "{{orderNumber}}"
                },
                {
                  "key": "userId",
                  "value": "{{userId}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
} 